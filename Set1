create database test;
use test;
create table city(
    id int,
    name varchar(17), 
    country_code varchar(3), 
    district varchar(20), 
    population int
);
insert into city values(6, 'Rotterdam', 'NLD', 'Zuid-Holland', 593321),
(3878, 'Scottsdale', 'USA', 'Arizona', 202705),
(3965, 'Corona', 'USA', 'California', 124966),
(3973, 'Concord', 'USA', 'California', 121780),
(3982, 'Coral Springs', 'USA', 'Florida', 117549),
(4054, 'Fairfield', 'USA', 'California', 92256),
(4058, 'Boulder', 'USA', 'Colorado', 91238),
(4061, 'Fall River', 'USA', 'Massachusetts', 90555);

#query 1
select * from city where country_code='USA' and population>100000;

#query 2
select * from city where country_code='USA' and population>120000;

#query 3
select * from city;

#query 4
select * from city where id=1661;

#query 5
select * from city where country_code='JPN';

#query 6
select name from city where country_code='JPN';


create table station(
    id int,
    city varchar(21), 
    state varchar(2), 
    lat_n int, 
    lon_w int
);
insert into station values
(794, 'Kissee Mills', 'MO', 139, 73),
(824, 'Loma Mar', 'CA', 48, 130),
(603, 'Sandy Hook', 'CT', 72, 148),
(478, 'Tipton', 'IN', 33, 97),
(619, 'Arlington', 'CO', 75, 92),
(711, 'Turner', 'AR', 50, 101),
(839, 'Slidell', 'LA', 85, 151),
(411, 'Negreet', 'LA', 98, 105),
(588, 'Glencoe', 'KY', 46, 136),
(665, 'Chelsea', 'IA', 98, 59),
(342, 'Chignik Lagoon', 'AK', 103, 153),
(733, 'Pelahatchie', 'MS', 38, 28),
(441, 'Hanna City', 'IL', 50, 136),
(811, 'Dorrance', 'KS', 102, 121),
(698, 'Albany', 'CA', 49, 80),
(325, 'Monument', 'KS', 70, 141),
(414, 'Manchester', 'MD', 73, 37),
(113, 'Prescott', 'IA', 39, 65),
(971, 'Graettinger', 'IA', 94, 150),
(266, 'Cahone', 'CO', 116, 127);

#query 7
select city, state from station;

#query 8
select distinct(city) from station where id%2=0;

#query 9
select count(*)-count(distinct(city)) from station;

#query 10
#part1 (max city len)
select city as max_len_city 
    from station 
    where length(city)=(select max(length(city)) from station) 
order by city limit 1;

#part2 (min city len)
select city as min_len_city 
    from station 
    where length(city)=(select min(length(city)) from station) 
order by city limit 1;

#query 11
select distinct(city) from station where REGEXP_LIKE(city,'^[aeiou]');

#query 12
select distinct(city) from station where REGEXP_LIKE(city,'[aeiou]$');

#query 13
select distinct(city) from station where !REGEXP_LIKE(city,'^[aeiou]');

#query 14
select distinct(city) from station where !REGEXP_LIKE(city,'[aeiou]$');

#query 15
select distinct(city) 
from station 
where !REGEXP_LIKE(city,'^[aeiou]') or !REGEXP_LIKE(city,'[aeiou]$');

#query 16
select distinct(city) 
from station 
where !REGEXP_LIKE(city,'^[aeiou]') and !REGEXP_LIKE(city,'[aeiou]$');


create table products(product_id int,
product_name varchar(30),
unit_price int,
constraint pk_product primary key(product_id)
);
insert into products values
(1, 'S8', 1000),
(2, 'G4', 800),
(3, 'iPhone', 1400);

create table sales(seller_id int,
product_id int,
buyer_id int,
sale_date date,
quantity int,
price int,
constraint fk_product_sale foreign key(product_id)
references products(product_id)
);
insert into sales values
(1, 1, 1, '2019-01-21', 2, 2000),
(1, 2, 2, '2019-02-17', 1, 800),
(2, 2, 3, '2019-06-02', 1, 800),
(3, 3, 4, '2019-05-13', 2, 2800);

#query 17
select tmp.product_id,
       tmp.product_name
from
    (
        SELECT s.product_id, 
               p.product_name,
               s.sale_date,
               rank() over(partition by s.product_id order by s.sale_date desc) as most_recent_sale
        from
        sales s
        JOIN
        products p
        on(s.product_id = p.product_id)
    ) tmp
where tmp.most_recent_sale = 1 and tmp.sale_date >= '2019-01-01' and tmp.sale_date <= '2019-03-31';

create table views(article_id int,
author_id int,
viewer_id int,
view_date date
);
insert into views values(1, 3, 5, '2019-08-01'),
(1, 3, 6, '2019-08-02'),
(2, 7, 7, '2019-08-01'),
(2, 7, 6, '2019-08-02'),
(4, 7, 1, '2019-07-22'),
(3, 4, 4, '2019-07-21'),
(3, 4, 4, '2019-07-21');

#query 18
select distinct(author_id) as id 
from views 
where author_id = viewer_id
order by id;

create table delivery(delivery_id int,
customer_id int,
order_date date,
customer_pref_delivery_date date,
constraint pk_delivery primary key(delivery_id)
);
insert into delivery values(1, 1, '2019-08-01', '2019-08-02'),
(2, 5, '2019-08-02', '2019-08-02'),
(3, 1, '2019-08-11', '2019-08-11'),
(4, 3, '2019-08-24', '2019-08-26'),
(5, 4, '2019-08-21', '2019-08-22'),
(6,AVG() 2, '2019-08-11', '2019-08-13');

#query 19
select 
round(
        (sum(case when order_date = customer_pref_delivery_date then 1 else 0 end) / count(*) * 100),
        2
    ) 
    as immediate_percentage 
from delivery;

create table ads(
ad_id int,
user_id int,
action varchar(25),
constraint pk_ads primary key(ad_id, user_id)
);
insert into ads VALUES(1, 1, 'Clicked'),
(2, 2, 'Clicked'),
(3, 3, 'Viewed'),
(5, 5, 'Ignored'),
(1, 7, 'Ignored'),
(2, 7, 'Viewed'),
(3, 5, 'Clicked'),
(1, 4, 'Viewed'),
(2, 11, 'Viewed'),
(1, 2, 'Clicked');

#query 20
with cte as
(select ad_id,
sum(case when action = 'Clicked' then 1 else 0 end) as clicked,
sum(case when action = 'Viewed' then 1 else 0 end) as viewed
from ads
group by ad_id)

select ad_id, 
case 
when ((clicked + viewed) > 0) then 
    round(((clicked) / (clicked + viewed) * 100), 2) 
    else 0.00 end as ctr
from cte;

create table employee(employee_id int,
team_id INT,
constraint pk_employee PRIMARY key(employee_id));
insert into employee values
(1, 8),
(2, 8),
(3, 8),
(4, 7),
(5, 9),
(6, 9);

#query 21
with cte as
(select team_id, count(*) as team_size
from employee
group by team_id)

select e.employee_id, c.team_size
from
employee e
join
cte c
on (e.team_id = c.team_id);

create table countries(country_id int,
country_name varchar(20),
constraint pk_countries PRIMARY key(country_id));
insert into countries values
(2, 'USA'),
(3, 'Australia'),
(7, 'Peru'),
(5, 'China'),
(8, 'Morocco'),
(9, 'Spain');

create table weather(country_id int,
weather_state int,
day date,
constraint pk_weather PRIMARY key(country_id, day));
insert into weather values
(2, 15, '2019-11-01'),
(2, 12, '2019-10-28'),
(2, 12, '2019-10-27'),
(3, -2, '2019-11-10'),
(3, 0, '2019-11-11'),
(3, 3, '2019-11-12'),
(5, 16, '2019-11-07'),
(5, 18, '2019-11-09'),
(5, 21, '2019-11-23'),
(7, 25, '2019-11-28'),
(7, 22, '2019-12-01'),
(7, 20, '2019-12-02'),
(8, 25, '2019-11-05'),
(8, 27, '2019-11-15'),
(8, 31, '2019-11-25'),
(9, 7, '2019-10-23'),
(9, 3, '2019-12-23');

#query 22
with cte
as
(select country_id,
       round(avg(weather_state), 3) as avg_temp,
       CASE
       when avg(weather_state) <= 15 then 'Cold'
       when avg(weather_state) >=25 then 'Hot'
       else 'Warm'
       end as weather_type 
from weather
where day between '2019-11-01' and '2019-11-30'
group by country_id)

select con.country_name,
       c.weather_type, 
       avg_temp
from countries con 
join cte c 
on (con.country_id = c.country_id);
